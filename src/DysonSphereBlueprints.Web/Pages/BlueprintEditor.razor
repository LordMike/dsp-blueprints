@page "/"
@page "/blueprint-editor"
@using System.ComponentModel
@using DysonSphereBlueprints.Web.Code
@using DysonSphereBlueprints.Web.Code.Model
@using DysonSphereBlueprints.Web.Code.Modifiers
@using DysonSphereBlueprints.Web.Components
@inject NotificationService NotificationService
@inject IJSRuntime JsService
@inject HttpClient Http

<PageTitle>Blueprint</PageTitle>

<h1>Blueprint</h1>

<RadzenStack Orientation="Orientation.Horizontal">
    <RadzenStack Orientation="Orientation.Vertical">
        <strong>Blueprint</strong>
        @* <RadzenTextBox @bind-Value="txtBlueprintBase64" Placeholder="BLUEPRINT:..."/> *@

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
            <RadzenButton Click="@ClickLoad" Text="Load"></RadzenButton>
            <RadzenButton Click="@ClickCopy" Text="Copy"></RadzenButton>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical">
        @if (bpModel is { Modified: true })
        {
            <RadzenAlert Variant="Variant.Flat" AlertStyle="AlertStyle.Warning" Icon="info" Shade="Shade.Lighter"
                         Size="AlertSize.ExtraSmall" AllowClose=false>
                The blueprint has been modified, Copy it to get the latest changes
            </RadzenAlert>
        }
        @if (isLoading)
        {
            <RadzenAlert Variant="Variant.Flat" AlertStyle="AlertStyle.Info" Icon="info" Shade="Shade.Lighter"
                         Size="AlertSize.ExtraSmall" AllowClose=false>
                Loading, this may take a while
            </RadzenAlert>
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" class="ms-auto">
        <strong>Actions</strong>
        @foreach (IBlueprintAction quickAction in quickActions)
        {
            <RadzenButton Disabled=@(bpModel == null)
                          Click="() => quickAction.ApplyAll(bpModel!)"
                          Size="ButtonSize.ExtraSmall"
                          Text=@quickAction.Title
                          title=@quickAction.Description
                          ButtonStyle="ButtonStyle.Base"></RadzenButton>
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical">
        <strong>Samples</strong>
        @foreach (BlueprintSample blueprintSample in BlueprintsSamples.GetSamples())
        {
            <RadzenButton Click=@(async () =>
            {
                txtBlueprintBase64 = await BlueprintsSamples.GetBlueprintSampleContent(Http, blueprintSample);
                ClickLoad();
            }) Text=@blueprintSample.Name ButtonStyle="ButtonStyle.Base"
                          Size="ButtonSize.ExtraSmall"></RadzenButton>
        }
    </RadzenStack>
</RadzenStack>

<div class="mt-4"></div>
@if (bpModel == null)
{
    <span class="text-muted">No model loaded at this time</span>
}
else
{
    <RadzenTabs TabPosition="TabPosition.Top">
        <Tabs>
            <RadzenTabsItem
                Text="Details">
                <BlueprintDetails Model="bpModel"/>
            </RadzenTabsItem>
            <RadzenTabsItem Disabled=@(bpModel.InterstellarLogisticsStations.Count == 0)
                            Text=@($"Interstellar logistics stations ({bpModel.InterstellarLogisticsStations.Count:N0})")>
                <RadzenAccordion>
                    <Items>
                        @foreach (BlueprintInterstellarLogisticsStationModel entry in bpModel.InterstellarLogisticsStations)
                        {
                            <RadzenAccordionItem
                                Text=@($"No. {entry.Id} - {entry.Building} - {entry.StorageSlots.Count(x => x.Item != 0)} / {entry.StorageSlots.Length} items {(entry.HasWarperSlot ? " (has warper)" : "")}")>
                                <LogisticsStation Model="entry" QuickActions="quickActions"
                                                  BlueprintEditModel="bpModel"/>
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            </RadzenTabsItem>
            <RadzenTabsItem Disabled=@(bpModel.PlanetaryLogisticsStations.Count == 0)
                            Text=@($"Planetary logistics stations ({bpModel.PlanetaryLogisticsStations.Count:N0})")>
                <RadzenAccordion>
                    <Items>
                        @foreach (BlueprintPlanetaryLogisticsStationModel entry in bpModel.PlanetaryLogisticsStations)
                        {
                            <RadzenAccordionItem
                                Text=@($"No. {entry.Id} - {entry.Building} - {entry.StorageSlots.Count(x => x.Item != 0)} / {entry.StorageSlots.Length} items")>
                                <LogisticsStation Model="entry" QuickActions="quickActions"
                                                  BlueprintEditModel="bpModel"/>
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            </RadzenTabsItem>
            <RadzenTabsItem Text=@($"Buildings ({bpModel.Blueprint.buildings.Length:N0})")>
                <BlueprintStats Model="bpModel"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

<script>
    async function copyTextToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            return true;
        } catch (error) {
            console.error(error.message);
            return false;
        }
    }
</script>

@code {
    string txtBlueprintBase64;
    BlueprintEditModel? bpModel;
    bool isLoading;

    IBlueprintAction[] quickActions = [];

    protected override void OnInitialized()
    {
        quickActions =
        [
            new TweakAddWarpers(NotificationService),
            new TweakSetFills(NotificationService)
        ];
    }

    void RenderBlueprint()
    {
        bpModel.Title ??= "desc1";
        bpModel.Description ??= "desc2";
        bpModel.GameVersion ??= "v1";

        txtBlueprintBase64 = bpModel.RenderBlueprint();
    }

    async Task ClickLoad()
    {
        if (txtBlueprintBase64.Length > 200_000)
        {
            // Large blueprints will take time to load
            isLoading = true;
            // await Task.Yield();

            await Task.Delay(200);            
        }
        
        BlueprintData dspBpModel = BlueprintData.CreateNew();
        BlueprintDataIOError loadCode = dspBpModel.FromBase64String(txtBlueprintBase64);

        if (loadCode != BlueprintDataIOError.OK)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Duration = 3000,
                Severity = NotificationSeverity.Error,
                Summary = "Unable to load blueprint",
                Detail = "The blueprint provided was not valid. Error code: " + loadCode
            });
            
            isLoading = false;
            StateHasChanged();
            return;
        }

        if (bpModel != null)
            bpModel.PropertyChanged -= OnBpModelChanged;

        bpModel = new BlueprintEditModel(dspBpModel);
        bpModel.PropertyChanged += OnBpModelChanged;
        
        isLoading = false;
        StateHasChanged();
    }

    private void OnBpModelChanged(object? o, PropertyChangedEventArgs propertyChangedEventArgs) => InvokeAsync(StateHasChanged);

    async Task ClickCopy()
    {
        if (bpModel.Modified)
        {
            RenderBlueprint();
            bpModel.SetModified(false);
        }

        bool success = await JsService.InvokeAsync<bool>("copyTextToClipboard", txtBlueprintBase64);
        NotificationService.Notify(new NotificationMessage
        {
            Duration = 10000,
            Severity = success ? NotificationSeverity.Info : NotificationSeverity.Warning,
            Summary = "Copy text",
            Detail = success ? "Copied the blueprint" : "An error occurred"
        });
    }
}