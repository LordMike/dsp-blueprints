@page "/"
@page "/blueprint-editor"
@using DysonSphereBlueprints.Analysis.Analysis
@using DysonSphereBlueprints.Web.Code
@using DysonSphereBlueprints.Web.Code.Model
@using DysonSphereBlueprints.Web.Code.Modifiers
@inject NotificationService NotificationService
@inject IJSRuntime JsService
@inject HttpClient Http

<PageTitle>Blueprint</PageTitle>

<h1>Blueprint</h1>

<RadzenStack Orientation="Orientation.Horizontal">
    <RadzenStack Orientation="Orientation.Vertical">
        <strong>Blueprint</strong>
        <RadzenTextBox @bind-Value="txtBlueprintBase64" Placeholder="BLUEPRINT:..."/>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
            <RadzenButton Click="@ClickLoad" Text="Load"></RadzenButton>
            <RadzenButton Click="@ClickCopy" Text="Copy"></RadzenButton>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical">
        @if (bpModel is { Modified: true })
        {
            <RadzenAlert Variant="Variant.Flat" AlertStyle="AlertStyle.Warning" Icon="info" Shade="Shade.Lighter"
                         Size="AlertSize.ExtraSmall" AllowClose=false>
                The blueprint has been modified, Copy it to get the latest changes
            </RadzenAlert>
        }
        @if (bpModel != null)
        {
            <span>@bpModel.Blueprint.icon0 @bpModel.Blueprint.icon1 @bpModel.Blueprint.icon2 @bpModel.Blueprint.icon3 @bpModel.Blueprint.icon4</span>
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" class="ms-auto">
        <strong>Actions</strong>
        @foreach (IBlueprintAction quickAction in quickActions)
        {
            <RadzenButton Disabled=@(bpModel == null)
                          Click="() => quickAction.ApplyAll(bpModel!)"
                          Size="ButtonSize.ExtraSmall"
                          Text=@quickAction.Title
                          title=@quickAction.Description
                          ButtonStyle="ButtonStyle.Base"></RadzenButton>
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical">
        <strong>Samples</strong>
        @foreach (BlueprintSample blueprintSample in BlueprintsSamples.GetSamples())
        {
            <RadzenButton Click=@(async () =>
            {
                txtBlueprintBase64 = await BlueprintsSamples.GetBlueprintSampleContent(Http, blueprintSample);
                ClickLoad();
            }) Text=@blueprintSample.Name ButtonStyle="ButtonStyle.Base"
                          Size="ButtonSize.ExtraSmall"></RadzenButton>
        }
    </RadzenStack>
</RadzenStack>

<div class="mt-4"></div>
@if (bpModel == null)
{
    <span class="text-muted">No model loaded at this time</span>
}
else
{
    <RadzenTabs TabPosition="TabPosition.Top">
        <Tabs>
            <RadzenTabsItem
                Text=@($"Interstellar logistics stations ({bpModel.InterstellarLogisticsStations.Count:N0})")>
                <RadzenAccordion>
                    <Items>
                        @foreach (BlueprintInterstellarLogisticsStationModel entry in bpModel.InterstellarLogisticsStations)
                        {
                            <RadzenAccordionItem
                                Text=@($"No. {entry.Id} - {entry.Building} - {entry.StorageSlots.Count(x => x.Item != 0)} / {entry.StorageSlots.Length} items {(entry.HasWarperSlot ? " (has warper)" : "")}")>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"
                                             Gap="1rem"
                                             Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.End">
                                    @{
                                        bool anyQuickActions = false;
                                    }
                                    @foreach (IBlueprintAction quickAction in quickActions)
                                    {
                                        @if (quickAction.CanApply(entry))
                                        {
                                            <RadzenButton Text=@quickAction.Title
                                                          title=@quickAction.Description
                                                          ButtonStyle="ButtonStyle.Base" Size="ButtonSize.ExtraSmall"
                                                          Click=@(args => quickAction.Apply(bpModel, entry))/>

                                            anyQuickActions = true;
                                        }
                                    }
                                    @if (!anyQuickActions)
                                    {
                                        <span style="color: var(--rz-text-disabled-color)"
                                              title="No quick actions available">No actions</span>
                                    }
                                </RadzenStack>
                                <div class=" rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem;">
                                    <RadzenText TextStyle="TextStyle.H6"><strong>Settings</strong></RadzenText>
                                    <RadzenRow RowGap="0">
                                        <RadzenColumn SizeSM="3">
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">Fill
                                                drones
                                            </RadzenText>
                                            <RadzenSwitch @bind-Value="entry.FillDrones"/>
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">Fill
                                                vessels
                                            </RadzenText>
                                            <RadzenSwitch @bind-Value="entry.FillVessels"/>
                                        </RadzenColumn>
                                        <RadzenColumn SizeSM="3">
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">Use
                                                orbital
                                                collectors
                                            </RadzenText>
                                            <RadzenSwitch @bind-Value="entry.UseOrbitalCollectors"/>
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">
                                                Require warpers
                                            </RadzenText>
                                            <RadzenSwitch @bind-Value="entry.RequireWarpers"/>
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">
                                                Warper distance
                                            </RadzenText>
                                            <RadzenDropDown TValue="int" TextProperty="Text" ValueProperty="Value"
                                                            Data="DspValues.WarperDistanceValues"
                                                            @bind-Value="entry.WarperDistance"/>
                                        </RadzenColumn>
                                        <RadzenColumn SizeSM="4">
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">Min
                                                drone
                                                load (@entry.MinDroneLoad %)
                                            </RadzenText>
                                            <RadzenSlider TValue="int"
                                                          @bind-Value="entry.MinDroneLoad"
                                                          Step="10" Min="0" Max="100"></RadzenSlider>
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">Min vessel load
                                                (@entry.MinVesselLoad %)
                                            </RadzenText>
                                            <RadzenSlider TValue="int"
                                                          @bind-Value="entry.MinVesselLoad"
                                                          Step="10" Min="0" Max="100"></RadzenSlider>
                                            <RadzenText TextStyle="TextStyle.Overline"
                                                        class="rz-display-flex rz-mt-4 rz-mb-0">Stack
                                                count (@(entry.StackCount == 0 ? "tech limit" : entry.StackCount))
                                            </RadzenText>
                                            <RadzenSlider TValue="int"
                                                          @bind-Value="entry.StackCount"
                                                          Step="1" Min="0" Max="4"></RadzenSlider>
                                        </RadzenColumn>
                                        <RadzenColumn>

                                        </RadzenColumn>
                                    </RadzenRow>
                                </div>
                                <div class="rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem;">
                                    <RadzenText TextStyle="TextStyle.H6"><strong>Storage</strong></RadzenText>
                                    <div class="rz-data-grid rz-datatable rz-datatable-scrollable">
                                        <table class="rz-grid-table rz-grid-table-fixed rz-grid-table-striped">
                                            <thead>
                                            <tr>
                                                <th>Item</th>
                                                <th>Max</th>
                                                <th>Local</th>
                                                <th>Remote</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            @foreach (BlueprintLogisticsStationStorageModel storageView in entry.StorageSlots)
                                            {
                                                <tr>
                                                    <td class="d-flex justify-content-between">
                                                        <span>@storageView.Item</span>
                                                        @* @if (storageView.UsedInASlot) *@
                                                        @* { *@
                                                        @*     <span *@
                                                        @*         title="This item is also used in one or more belts out of the logistics station">(used in slot)</span> *@
                                                        @* } *@
                                                    </td>
                                                    <td class="mx-2 my-1">
                                                        <RadzenSlider Disabled=!storageView.HasItem
                                                                      Value="@storageView.Max"
                                                                      TValue="int"
                                                                      Change=@(args => storageView.Max = args)
                                                                      Step="100" Min="0" Max="20000"/>
                                                        <span>@storageView.Max.ToString("N0")</span>
                                                    </td>
                                                    <td>
                                                        <RadzenSelectBar Disabled=!storageView.HasItem
                                                                         TValue="LogisticRole"
                                                                         Size="ButtonSize.Small"
                                                                         Value="storageView.LocalLogic"
                                                                         Change=@(args => storageView.LocalLogic = args)>
                                                            <Items>
                                                                <RadzenSelectBarItem Value="LogisticRole.None"
                                                                                     Text="Storage"/>
                                                                <RadzenSelectBarItem Value="LogisticRole.Demand"
                                                                                     Text="Demand"/>
                                                                <RadzenSelectBarItem Value="LogisticRole.Supply"
                                                                                     Text="Supply"/>
                                                            </Items>
                                                        </RadzenSelectBar>
                                                    </td>
                                                    <td>
                                                        <RadzenSelectBar Disabled=!storageView.HasItem
                                                                         TValue="LogisticRole" Size="ButtonSize.Small"
                                                                         Value="storageView.RemoteLogic"
                                                                         Change=@(args => storageView.RemoteLogic = args)>
                                                            <Items>
                                                                <RadzenSelectBarItem Value="LogisticRole.None"
                                                                                     Text="Storage"/>
                                                                <RadzenSelectBarItem Value="LogisticRole.Demand"
                                                                                     Text="Demand"/>
                                                                <RadzenSelectBarItem Value="LogisticRole.Supply"
                                                                                     Text="Supply"/>
                                                            </Items>
                                                        </RadzenSelectBar>
                                                    </td>
                                                </tr>
                                            }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            </RadzenTabsItem>
            @* <RadzenTabsItem Text=@($"Buildings ({bpModel.buildings.Length:N0})")> *@
            @*     <div class="rz-data-grid rz-datatable rz-datatable-scrollable"> *@
            @*         <table class="rz-grid-table rz-grid-table-fixed rz-grid-table-striped"> *@
            @*             <thead> *@
            @*             <tr> *@
            @*                 <th>Building</th> *@
            @*                 <th>Recipe</th> *@
            @*                 <th>Count</th> *@
            @*             </tr> *@
            @*             </thead> *@
            @*             <tbody> *@
            @*             @{ *@
            @*                 var buildingRecipeGroups = bpModel *@
            @*                     .buildings *@
            @*                     .GroupBy(s => new { Item = (DspItem)s.itemId, Recipe = (DspRecipe)s.recipeId }) *@
            @*                     .OrderBy(s => s.Key.Item.ToString()) *@
            @*                     .ThenBy(s => s.Key.Recipe.ToString()) *@
            @*                     .ToList(); *@
            @*             } *@
            @*             @foreach (var building in buildingRecipeGroups) *@
            @*             { *@
            @*                 <tr> *@
            @*                     <td class="d-flex justify-content-between"> *@
            @*                         @building.Key.Item *@
            @*                     </td> *@
            @*                     <td class="mx-2 my-1"> *@
            @*                         @if (building.Key.Recipe != 0) *@
            @*                         { *@
            @*                             @building.Key.Recipe *@
            @*                         } *@
            @*                         else *@
            @*                         { *@
            @*                             <span class="text-muted fst-italic">None</span> *@
            @*                         } *@
            @*                     </td> *@
            @*                     <td> *@
            @*                         @building.Count().ToString("N0") *@
            @*                     </td> *@
            @*                 </tr> *@
            @*             } *@
            @*             </tbody> *@
            @*         </table> *@
            @*     </div> *@
            @* </RadzenTabsItem> *@
        </Tabs>
    </RadzenTabs>
}

<script>
    async function copyTextToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            return true;
        } catch (error) {
            console.error(error.message);
            return false;
        }
    }
</script>

@code {
    string txtBlueprintBase64;
    BlueprintEditModel? bpModel;

    IBlueprintAction[] quickActions = [];

    protected override void OnInitialized()
    {
        quickActions =
        [
            new TweakAddWarpers(NotificationService),
            new TweakSetFills(NotificationService)
        ];
    }

    void RenderBlueprint()
    {
        bpModel.Title ??= "desc1";
        bpModel.Description ??= "desc2";
        bpModel.GameVersion ??= "v1";

        txtBlueprintBase64 = bpModel.RenderBlueprint();
    }

    void ClickLoad()
    {
        BlueprintData dspBpModel = BlueprintData.CreateNew();
        BlueprintDataIOError loadCode = dspBpModel.FromBase64String(txtBlueprintBase64);

        if (loadCode != BlueprintDataIOError.OK)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Duration = 3000,
                Severity = NotificationSeverity.Error,
                Summary = "Unable to load blueprint",
                Detail = "The blueprint provided was not valid. Error code: " + loadCode
            });
            return;
        }

        bpModel = new BlueprintEditModel(dspBpModel);

        StateHasChanged();
    }

    async Task ClickCopy()
    {
        if (bpModel.Modified)
        {
            RenderBlueprint();
            bpModel.SetModified(false);
        }

        bool success = await JsService.InvokeAsync<bool>("copyTextToClipboard", txtBlueprintBase64);
        NotificationService.Notify(new NotificationMessage
        {
            Duration = 10000,
            Severity = success ? NotificationSeverity.Info : NotificationSeverity.Warning,
            Summary = "Copy text",
            Detail = success ? "Copied the blueprint" : "An error occurred"
        });
    }

}